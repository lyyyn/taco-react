{"version":3,"sources":["components/Header.js","components/RandomTaco.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","RandomTaco","props","state","taco","fetch","then","response","json","data","console","log","setState","this","className","seasoning","name","recipe","base_layer","mixin","shell","condiment","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8OAYeA,EAVf,uKAEQ,OACI,6BACI,iDAJhB,GAA4BC,aCwDbC,EAxDf,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,MAHK,EADvB,gEAOyB,IAAD,OAEhBC,MADe,gDAEVC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHC,QAAQC,IAAI,QAASF,GACrB,EAAKG,SAAS,CAAER,KAAMK,SAbtC,+BAiBQ,OAAwB,OAApBI,KAAKV,MAAMC,KAEP,2CAIA,6BACI,6BACI,0BAAMU,UAAU,oBAAhB,eACA,0BAAMA,UAAU,mBAAmBD,KAAKV,MAAMC,KAAKW,UAAUC,MAC7D,6BAAMH,KAAKV,MAAMC,KAAKW,UAAUE,SAGpC,6BACI,0BAAMH,UAAU,oBAAhB,gBACA,0BAAMA,UAAU,mBAAmBD,KAAKV,MAAMC,KAAKc,WAAWF,MAC9D,6BAAMH,KAAKV,MAAMC,KAAKc,WAAWD,SAErC,6BACI,0BAAMH,UAAU,oBAAhB,WACA,0BAAMA,UAAU,mBAAmBD,KAAKV,MAAMC,KAAKe,MAAMH,MACzD,6BAAMH,KAAKV,MAAMC,KAAKe,MAAMF,SAEhC,6BACI,0BAAMH,UAAU,oBAAhB,WACA,0BAAMA,UAAU,mBAAmBD,KAAKV,MAAMC,KAAKgB,MAAMJ,MACzD,6BAAMH,KAAKV,MAAMC,KAAKgB,MAAMH,SAEhC,6BACI,0BAAMH,UAAU,oBAAhB,eACA,0BAAMA,UAAU,mBAAmBD,KAAKV,MAAMC,KAAKiB,UAAUL,MAC7D,6BAAMH,KAAKV,MAAMC,KAAKiB,UAAUJ,cAhDxD,GAAgCjB,aCYjBsB,MATf,WACE,OACE,yBAAKR,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.7d532014.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Random Taco!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nexport class RandomTaco extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            taco: null,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const apiUrl = 'http://taco-randomizer.herokuapp.com/random/';\r\n        fetch(apiUrl)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                console.log('Taco:', data);\r\n                this.setState({ taco: data });\r\n            });\r\n    }\r\n    render() {\r\n        if (this.state.taco === null) {\r\n            return (\r\n                <div>Finding...</div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        <span className=\"ingredient-label\">Seasoning: </span> \r\n                        <span className=\"ingredient-text\">{this.state.taco.seasoning.name}</span>\r\n                        <pre>{this.state.taco.seasoning.recipe}</pre>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span className=\"ingredient-label\">Base Layer: </span> \r\n                        <span className=\"ingredient-text\">{this.state.taco.base_layer.name}</span>\r\n                        <pre>{this.state.taco.base_layer.recipe}</pre>\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"ingredient-label\">Mixin: </span> \r\n                        <span className=\"ingredient-text\">{this.state.taco.mixin.name}</span>\r\n                        <pre>{this.state.taco.mixin.recipe}</pre>\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"ingredient-label\">Shell: </span> \r\n                        <span className=\"ingredient-text\">{this.state.taco.shell.name}</span>\r\n                        <pre>{this.state.taco.shell.recipe}</pre>\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"ingredient-label\">Condiment: </span> \r\n                        <span className=\"ingredient-text\">{this.state.taco.condiment.name}</span>\r\n                        <pre>{this.state.taco.condiment.recipe}</pre>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default RandomTaco\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport RandomTaco from './components/RandomTaco';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <RandomTaco />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}